@Transactional(readOnly = true)
	public Page<Object> findAll(Search search) throws ParseException {

		this.defaultFilters(search);

		List<Predicate> conditionsList = new ArrayList<Predicate>();

		CriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();

		CriteriaQuery<Object> queryObj = criteriaBuilder.createQuery();
		Root<CustomerPriceHistory> root = queryObj.from(CustomerPriceHistory.class);

		if (null != search.getStatusId()) {
			Expression<String> expStatus = root.get("status");
			Predicate predStatus = expStatus.in(search.getStatusId());
			conditionsList.add(predStatus);
		}

		List<Date> dates = this.converterStringWithDate(search.getDate().toString(), search.getHourInitial(),
				search.getHourLast());

		Predicate between = criteriaBuilder.between(root.get("dateCreated"), dates.get(0), dates.get(1));

		conditionsList.add(between);

		if (null != search.getGroupSpreadId()) {
			GroupSpread groupSpread = new GroupSpread();
			groupSpread.setId(search.getGroupSpreadId());
			Predicate prGroupSpread = criteriaBuilder.equal(root.get("groupSpread"), groupSpread);
			conditionsList.add(prGroupSpread);
		}

		if (null != search.getChannelId()) {
			Channel channel = new Channel();
			channel.setId(search.getChannelId());
			Predicate prChannel = criteriaBuilder.equal(root.get("channel"), channel);
			conditionsList.add(prChannel);
		}

		Pageable pageable = this.typeOrderBy(search);

		System.out.println(pageable.getSort());

		Predicate[] predicates = new Predicate[conditionsList.size()];
		CriteriaQuery<Object> selectQuery = queryObj.select(root).where(conditionsList.toArray(predicates))
				.orderBy(toOrders(pageable.getSort(), root, criteriaBuilder));

		try {

			TypedQuery<Object> typedQuery = em.createQuery(selectQuery);

			List<Object> list = typedQuery.setFirstResult(pageable.getPageNumber())
					.setMaxResults(pageable.getPageSize()).getResultList();

			return new PageImpl<Object>(list, pageable, list.size());

		} catch (Exception e) {
			log.error("Error: ", e);
			throw e;
		}
	}
